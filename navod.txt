//prerekvizity
//dependency manager NPM (tento program je dodavany spolecne s Node.js)
//v php byl dependency manger Composer (ten tady nepotrebujeme)

//mac si muze nodejs nainstalovat pres homebrew
# brew install node

//stahneme si a nainstalujeme nodejs
//https://nodejs.org/en

//kdyz vas to vyzve k tomu jestli chcete nainstalovat dodatecne tooly, tak reknete ne.

//restartovat VSC

//overeni zda npm funguje
//cislo verze
# npm -v

//nyni muzeme vytvorit vue projekt
//otevreme terminal ve slozce kam cheme projekt vytvorit
# npm create vue@latest zoo

//prikazova radka se zepta zda knihovnu chceme opravdu stahnout
//v zavorce uvidite (y)
//odentrujte to nebo napiste y a pak to od entrujte 

//vue dokumentace
https://vuejs.org/
https://cs.vuejs.org/

//nyni se zobrazi dotaznicek
//my budeme chtit zacit uplne od 0, takze na vsechno odpovezte NO

//terminal se nad obcas zepta na volbu
(n/Y) - uz je predvybrane Y ale muzeme rict n, kdyz chcete Y tka staci dat enter
(y) - program vam dal jen 1 volbu, napiste y nebo jen dejte enter
(n/y) - program po vas chce odpoved musite explicitne napsat y nebo n


//nyni ze dobrazi dotaznicek
//my budem echit zacit uplne od 0, takze na vsehcno odpovezte NO
//po vytvoreni projektu nas to vyzve ke spusteni techto tri prikazu
//1) cd zoo - presune pozici terminalu ze slozky vue-minikurz do slozky zoo
//2) npm install - tento prikaz dostahuje vsechny dalsi knihovny/dependence

Done. Now run:
  cd zoo
  npm install
  npm run dev

//spusti se nam loaclni server: http://localhost:5173/

//PAMATUJTE !!!
//to co vidite na adrese localhost jeste neni hotovy produkt 
//aplikace bezi a vypada jako finalni produkt ale jeji vnitrni mechanizmy jeste nejsou doladene pro spusteni
//abychom aplikaci pripravili pro spusteni, tak je potreba spustit prikaz
 # npm run build
 //tento prikaz vezme vsechny soubory VUE projektu a vytvorili z toho HTML, CSS, JS 



 //kokneme se ted na ten finalni produkt
# npm run preview
//spusti se nam localni server: http://localhost:4173/

//my budeme vetsinu casu pouzivat: http://localhost:5173/

//proc pouzivta frameworky?
//1) Stranka je zalozne na komponentach. Je mozne tedy aplikaci jednoduce upravoat a rozsirovat. navi ma kazada komponenta vlasnti JS a CSS. Kod je pak prehledny a modularni.
//2) Framework provadi ruzne optimalizacni operace. (spojuje souboury do 1, minifukuje kod, nezahrne nepouzite soubory)
//3) Kod je reaktivni. HTML je propojene s nejakou JS promennou a kdykoliv kdy se promenna zmeni, tak to HTML na to zareaguje a prekresli se. Ve vanille jsme to museli delat manualne skrze document.querySelector a innerHTML.

//cela aplikace se spousti skrze soubor index.html
//RACT a VUE jsou single page aplikace (SPA)

//SPA ma nevyhodu: SEO ho nedokaze prozkoumat

//SPA -> SSR (SERVER SIDE RENDERING) dokaze prvni stranku vygenerovat na serveru, aby SEO melo co cist


//vsechny vase kody budou ve slozce src
//v src jsou 2 korenove soubory
//App.vue
//main.js

//vue pouziva SINGLE FILE components
//ve frameworcich se obsecne komponente sklada ze 3 souboru: script, HTML a CSS
//vue je jediny ktery tyto tri casti ma v 1 souboru (usnadnuje to praci, nemusite hledat 3 ruzne soubory)
//SFC - se sklada z bloku script:setup, template, style:scoped

//stahnout rozsireni vue - official od autora vue ve vison vizual code 
//styly v componentach jsou scopovany
//vue ma ale specialni soubor pro globalni styly
//sem budeme psat styly, ktere chceme aplikovat pro vsechny elementy na strance 
// /assets/main.css

//pojdme si nyni vytvorit nasi prvni komponentu
//vsechny komponenety budeme vytvaret do slozky/src/componenets
//Tony preferuje "flat" struktury souboru: toto znamena, ze nebudeme komponenty organizovat do podslozek 
//nazvy komponent se snazte vzdy pojmenovavat tak aby mely alespon 2 slova 

//v korenove komponente App.vue musime komponent PocetNavstevniku naimportovat 
//po naimportovani komonenty muzeme komponentu vykreslit v bloku template jako obycejny HTML element
// <PocetNavstevniku />

//styly ktere jsou uvedene v komponente maji nejvyssi prioritu 

//reaktivita
//v template bloku muzeme pouzit dvojte chlupate zavorky {{ }}, kterym si rika interpolace/double mustache

//poznamka: syntakticke chyby najdete v konzoli

//abychom mohli vytvorit reaktivni promennou, tak je potreba pouzit funkci ref()
//do funkce ref() se ulozi startovaci hodnota
//vanilla JS tuto funkci nema, je to exkluzivni pro vue
//exclusivni funkce musime naimportovat
//import {ref} from "vue"

//ukol: vytvorte komponetu ktera se bude jmenovat UkolOdpocitavadlo.vue, na obrazovce se objevi na azcatku cislo 10, pak s ezacne postupne odpocitavat a po doaszeni 0 se objevi misot cisla "Hotovo!"

//krome ref() existuje i computed() promenna
//computed promenna je zavisla na jinych reaktivnich proemnnych
//kdykoliv se zmeni nejaka zavisla rekativni promenna, tak se prepocita i computed promenna

//direktiva v-on nam na elemnt pripoji posluchace
// v-on:click=""
// do "" muzete psat JS operace
// nebo do "" vlozite volani funkce
// v-on:click="" ma zkraceny zapis @click=""

//direktiva v-bind
//v atributu elementu nemuzeme pouzit {{}}
//pokud chceme mit dynamicky atribut, tak musime pouzit direktivu v-bind
// v-bind:type="typInputu"
//zkracene by to vypadala takhle
// :type="typInputu"
//pokud se jedna o atribut disabled, checked nebo selected (atributy, ktere jsou singlove bez hodnoty), tak se do "" dava booleanovska hodnota
//pokud je boolean true, tak se atrbitu vypise jinak se vynecha
// :disabled="booleanPromenna"

//6 hodinovy tutorial na zakladni funkce Vue
https://www.youtube.com/watch?v=I_xLMmNeLDY
